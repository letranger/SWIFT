#+TITLE: SwiftUI
#+INCLUDE: ../web.org
#+latex:\newpage

* iOS app 的開發界面: UIKit v.s. SwiftUI
:PROPERTIES:
:CUSTOM_ID: SW-UIKIT-SWIFTUI
:END:
** UIKit 與 SwiftUI 的差異性
*** 系統需求
UIKit 是從 Xcode1 就一直存在的 Framework；而 SwiftUI 則是 2019/6 WWDC 所發表的全新用來繪製 UI 的 Framework。因此，SwiftUI 必須搭配 iOS13+ 和 MacOS10.15+。[fn:1]
*** 底層語言
UIKit 底層仍為 Objecitve-C；而 SwiftUI 則是完完全全用 Swift 打造的 Framework。
*** 語法簡潔度
SwiftUI 產生一顯示文字的元件更精簡潔了。
*** Declarative vs Imperative Programming
- imperative programming：告訴電腦如何做(HOW)來得到我們想要的結果(WHAT)，如 Java, C++, PHP, C#, Swift
- declarative programming：告訴電腦我們想要的結果(WHAT)，讓電腦決定如何做(HOW)，如 SwiftUI

*** 跨平台
跨平台指的非跨 Android(但希望有那麼一天是可以支援的😀)。跨平台指的是使用 SwiftUI 所開發的專案，可以同時支援 macOS、watchOS、tvOS 等系統。引用一句 WWDC2019 SwiftUI 演講者所說的一句話。
#+BEGIN_QUOTE
Learn once, apply everywhere.
#+END_QUOTE
*** Automatic Preview
這是此次 SwiftUI 最大的亮點之一，所謂 Automatic Preview，意思指的是即時預覽，即我們一邊調整程式碼的同時，也可以立即看到修改後的結果。
*** 自動支援進階功能
SwiftUI 本身即支援 Dynamic Type、Dark Mode、 Localization 等等。這邊特別來講一下 UIKit 和 SwiftUI 在文字設定上有關於 Dark Mode 的差異，UIKit 若是無特別指定文字的顏色(意即使用 Default 的選項)，在 Light Mode 字體會是白色；相對的在 Dark Mode 即會是白色，這點跟 SwiftUI 沒有特別的差異，但是 SwiftUI 除了 Default 外，還有 Secondary，如果還不喜歡的話，還有第三個選項，就是在 Assets 自行設定 Light Mode 和 Dark Mode 分別要顯示的顏色。
#+CAPTION: UIKit 與 SwiftUI 的差異性比較圖
#+LABEL:fig:Diff-1
#+name: fig:Diff-1
#+ATTR_LATEX: :width 300
#+ATTR_ORG: :width 300
#+ATTR_HTML: :width 300
[[file:images/differences.png]]

** SwiftUI vs UIKit: Benefits and Drawbacks
*** Drawbacks of SwiftUI [fn:2]
- It supports only iOS 13 and Xcode 11. By switching to them, you abandon users of older versions of iOS, which is a radical move devoid of concern for the user. But since Apple annually updates its list of supported iOS versions, I think SwiftUI will be used more over the next two years as users install the latest iOS version.
- It’s still very young, so there isn’t much data on [[https://stackoverflow.com/][Stack Overflow]]. This means that you can’t get much help resolving complicated issues.
- It doesn’t allow you to examine the view hierarchy in Xcode Previews.
*** Benefits of SwiftUI [fn:2]
- It’s easy to learn, and the code is simple and clean.
- It can be mixed with UIKit using UIHostingController.
- It allows you to easily manage themes. Developers can easily add dark mode to their apps and set it as the default theme, and users can easily enable dark mode. Besides, it looks awesome.
- SwiftUI provides mechanisms for reactive programming enthusiasts with BindableObject, ObjectBinding, and the whole Combine framework.
- It offers Live Preview. This is a very convenient and progressive way to see the results of code execution in real time without having to build. I’m not sure if it somehow affects the processor. So far, I’ve noticed a delay provoked by the use of Live Preview, but I think Apple will soon make improvements.
- SwiftUI no longer needs Interface Builder. It was replaced by Canvas, an interactive interface editor. When writing code, the visual part in Canvas is automatically generated, and when you create visual presentation elements, they automatically appear in the code.
- Your application will no longer crash if you forget to update the @IBOutlet association with the variable.
- There’s no AutoLayout or related problems. Instead, you use things like HStack, VStack, ZStack, Groups, Lists, and more. Unlike AutoLayout, SwiftUI always produces a valid layout. There’s no such thing as an ambiguous or unsatisfiable layout. SwiftUI replaces storyboards with code, making it easy to create a reusable view and avoid conflicts related with the simultaneous use of one project by the development team.

  #+latex:\newpage

* AppDelegate v.s. SceneDelegate
:PROPERTIES:
:CUSTOM_ID: delegate
:END:
- AppDelegate 原來的職責為負責 App 的生命週期和 UI 生命週期，在 Xcode11 後，AppDelegate 將 UI 的生命週期(Scene Session)交給 SceneDelegate。原 Xcode10
- 使用 Swift 為 User Interface 的專案 Launch 的生命週期為 AppDelegate → ViewController，而使用 SwiftUI 為 User Interface 的專案則變成為 AppDelegate → SceneDelegate → ContentView，原本應該出現在 AppDelegate 的 applicationWillEnterForeground(_:) 等相關 App 到前、背景等相關的生命週期邏輯也都移至 SceneDelegate 裡了，method 名稱 application 的前綴字也都更改為 scene 了。[fn:3]

** SceneDelegate.swift
#+BEGIN_SRC swift -r -n
import UIKit
import SwiftUI

class SceneDelegate: UIResponder, UIWindowSceneDelegate {

    var window: UIWindow?

    func scene(_ scene: UIScene, willConnectTo session: UISceneSession, options connectionOptions: UIScene.ConnectionOptions) {
        // Use this method to optionally configure and attach the UIWindow `window` to the provided UIWindowScene `scene`.
        // If using a storyboard, the `window` property will automatically be initialized and attached to the scene.
        // This delegate does not imply the connecting scene or session are new (see `application:configurationForConnectingSceneSession` instead).

        // Create the SwiftUI view that provides the window contents.
        let contentView = ContentView()

        // Use a UIHostingController as window root view controller.
        if let windowScene = scene as? UIWindowScene {
            let window = UIWindow(windowScene: windowScene)
            window.rootViewController = UIHostingController(rootView: contentView)
            self.window = window
            window.makeKeyAndVisible()
        }
    }

    func sceneDidDisconnect(_ scene: UIScene) {
        // Called as the scene is being released by the system.
        // This occurs shortly after the scene enters the background, or when its session is discarded.
        // Release any resources associated with this scene that can be re-created the next time the scene connects.
        // The scene may re-connect later, as its session was not neccessarily discarded (see `application:didDiscardSceneSessions` instead).
    }

    func sceneDidBecomeActive(_ scene: UIScene) {
        // Called when the scene has moved from an inactive state to an active state.
        // Use this method to restart any tasks that were paused (or not yet started) when the scene was inactive.
    }

    func sceneWillResignActive(_ scene: UIScene) {
        // Called when the scene will move from an active state to an inactive state.
        // This may occur due to temporary interruptions (ex. an incoming phone call).
    }

    func sceneWillEnterForeground(_ scene: UIScene) {
        // Called as the scene transitions from the background to the foreground.
        // Use this method to undo the changes made on entering the background.
    }

    func sceneDidEnterBackground(_ scene: UIScene) {
        // Called as the scene transitions from the foreground to the background.
        // Use this method to save data, release shared resources, and store enough scene-specific state information
        // to restore the scene back to its current state.
    }
}

struct SceneDelegate_Previews: PreviewProvider {
    static var previews: some View {
        /*@START_MENU_TOKEN@*/Text("Hello, World!")/*@END_MENU_TOKEN@*/
    }
}
#+END_SRC
#+latex:\newpage

* UIKit
:PROPERTIES:
:CUSTOM_ID: SW-UIKIT-SWIFTUI
:END:
DEMO
#+latex:\newpage

* SwiftUI
:PROPERTIES:
:CUSTOM_ID: SW-SWIFTUI-INTRO
:END:
** 教學影片
- [[https://www.youtube.com/watch?v=VlhcNR7Qrno][Your First SwiftUI App (Full Compilation!)]]
- [[https://www.youtube.com/watch?v=jbtqIBpUG7g][Lecture 1: Course Logistics and Introduction to SwiftUI]]: Stanford University CS193p
- [[https://www.youtube.com/watch?v=4GjXq2Sr55Q&t=5254s][Lecture 2: MVVM and the Swift Type System]]
- [[https://www.youtube.com/watch?v=uUMWEu2YJew&list=PLuoeXyslFTuZRi4q4VT6lZKxYbr7so1Mr][SwiftUI by Paul Hudson: Play All]]
- [[https://www.youtube.com/watch?v=uUMWEu2YJew][Understanding the basic structure of a SwiftUI app –  WeSplit SwiftUI Tutorial 1/10]]
- [[https://www.youtube.com/watch?v=BB3Gi4CGKrA][Creating a form – WeSplit SwiftUI Tutorial 2/10]]
- [[https://www.youtube.com/watch?v=K5628N_vTCs][Pushing new views onto the stack using NavigationLink – Moonshot SwiftUI Tutorial 3/10]]
- [[https://www.youtube.com/watch?v=46vqD5OPdys][Modifying program state – WeSplit SwiftUI Tutorial 4/10]]
- [[https://www.youtube.com/watch?v=IG1os9XXNiI&list=PLuoeXyslFTuZRi4q4VT6lZKxYbr7so1Mr&index=5][Binding state to user interface controls – WeSplit SwiftUI Tutorial 5/10]]
- [[https://www.youtube.com/watch?v=JGlWrqMbizI][SwiftUI - Calculator Demo from Stanford iOS Course Part 1 of 2]]
- [[https://www.youtube.com/watch?v=cjrAWGcpwJM][The Calculator (part 1) - Learn Swift UI]]
- [[https://www.youtube.com/watch?v=cbqMkIG6Qeg][Understanding MVVM Design Pattern]]: 講的超清楚
- [[https://www.youtube.com/user/azamsharp/videos][azamsharp SwiftUI Videos]]
- [[https://www.youtube.com/watch?v=nc-n5Gc8wN0][系列: Setting up - SwiftUI Starter Project 1/14]]

** 使用 SwiftUI 開啟新專案 [fn:3]
1) 首先，打開 Xcode，並點擊 Create new Xcode project。在 iOS 之下選擇 Single View App，並為專案命名。
2) 然後在下方勾選 Use SwiftUI 的選項，如果沒有勾選該選項的話，Xcode 會自動產生 storyboard 檔案(UIKit)。
3) Xcode 會自動幫你創建一個名為 ContentView.swif 的檔案，Xcode 會在程式碼的右邊呈現一個即時的預覽視窗(preview), 點選 resume 鈕生成預覽畫面(會花一點時間)。

*** ContentView.swift
#+BEGIN_SRC swift -r -n
import SwiftUI (ref:import)

struct ContentView: View { (ref:struct)
    var body: some View { (ref:vg)
        Text("文字") (ref:text)
    }
}

struct ContentView_Previews: PreviewProvider { (ref:preview)
    static var previews: some View {
        ContentView()
    }
}
#+END_SRC
- 第[[(import)]]行和 C++中的#include <iostream>同意，先匯入所需函式庫
- 第[[(struct)]]行說明有一個 struct 名為 ContentView，這個 ContentView conform(尊循)View 這個 Protocol，這代表必須有一個 some view 或回傳一個 some view
- 在 ContentView 中，有一個叫 body 的變數(第[[(vg)]]行)，這個 body 的回傳類型為 some view，some 為 swift 5.1 出現的新 keyword，屬於 opaque 回傳類型，代表它會回傳某些類型為 view 的值，至於實際回傳的是那一種類型的 view，swift 並不太在意
- 第[[(text)]]行的最前面省略了一個 return，意思是 body 這個 variable 最後會傳回一個 Text, 即，呈現在 View 上，body 只能回傳一個值，若 view 上面有許多物件，則需包含進一個 container 中，最後回傳這一個 container。
- 第[[(preview)]]行的 ContentView_Previews 負責產生預覧畫面。

** Text
*** 改變 Text 的屬性
- 改變 component 有兩種方式：工具列、code
- Attributes (modifier 的不同順序可能產生不同效果)
  + frame
  + foregroundColor
  + background
  + font
  + padding
  + cornerRadius


**** SwiftUI Inspector:
1) on Text object (in preview screen): CMD + click
2) select *Show SwiftUI Inspector*
3) change *Text*, *Font*, *Color*
4) Monitor the corresponding code changes in code window
#+CAPTION: SwiftUI Inspector
#+LABEL:fig:Inspector-1
#+name: fig:Inspector-1
#+ATTR_LATEX: :width 300
#+ATTR_ORG: :width 300
#+ATTR_HTML: :width 600
[[file:images/inspector-1.gif]]
**** Inspector frame
#+CAPTION: SwiftUI Inspector
#+LABEL:fig:inspector-2
#+name: fig:inspector-2
#+ATTR_LATEX: :width 300
#+ATTR_ORG: :width 300
#+ATTR_HTML: :width 600
[[file:images/inspector-2.gif]]
**** code
於 Text("...")後加上屬性 function 或修改其他屬性
#+CAPTION: SwiftUI Change Attributes
#+LABEL:fig:ChangeAttribute
#+name: fig:ChangeAttribute
#+ATTR_LATEX: :width 300
#+ATTR_ORG: :width 300
#+ATTR_HTML: :width 600
[[file:images/inspector-3.gif]]

** VStack

一個以上的物件都要放在 Stack 中，Stack 與 Stack 可相互包含，加入方式有二：
*** 由工具列 drag: Xcode 會自動加入相對的 code
#+CAPTION: Drag component from toolbar
#+LABEL:fig:VStack
#+name: fig:VStack
#+ATTR_LATEX: :width 300
#+ATTR_ORG: :width 300
#+ATTR_HTML: :width 600
[[file:images/vstack.gif]]
*** coding
#+begin_src swift -r -n :results output :exports both
import SwiftUI

struct ContentView: View {
    var body: some View {
        VStack {
            Text("第一行文字")
            Text("第二行文字")
        }
    }
}

struct ContentView_Previews: PreviewProvider {
    static var previews: some View {
        ContentView()
    }
}
#+end_src

#+RESULTS:

#+CAPTION: VStack
#+LABEL:fig:VStack-1
#+name: fig:VStack-1
#+ATTR_LATEX: :width 300
#+ATTR_ORG: :width 300
#+ATTR_HTML: :width 300
[[file:images/vstack-1.jpg]]
*** SwiftUI 撰寫原則
- body 恆為只能 return 一物件。
- 若有多個物件時，一定得放在 Stack 裡。

** HStack
#+begin_src swift -r -n :eval no
import SwiftUI

struct ContentView: View {
    var body: some View {
        HStack {
            VStack {
                Button("請按我") {
                    print("TEST")
                }
                .frame(width: 60, height: 30, alignment: .center)
                .foregroundColor(.white)
                .background(Color.green)
                Button("別亂按") {
                    print("QQ")
                }
            }
            VStack {
                Text("第一行文字")
                    .frame(width: 100, height: 30, alignment: .center   )
                    .foregroundColor(.white)
                    .background(Color.orange)
                Text("第二行文字")
                    .frame(width: 100, height: 30, alignment: .center)
                    .foregroundColor(.white)
                    .background(Color.red)
            }
        }
    }
}

struct ContentView_Previews: PreviewProvider {
    static var previews: some View {
        ContentView()
    }
}
#+end_src
#+CAPTION: HStack
#+LABEL:fig:HStack-1
#+name: fig:HStack-1
#+ATTR_LATEX: :width 300
#+ATTR_ORG: :width 300
#+ATTR_HTML: :width 300
[[file:images/hstack-1.jpg]]

** ZStack

** Image
影像來源可以是 System Image 或自行下載/編修的影像(Customized Image)
*** System Image
**** [[https://developer.apple.com/design/human-interface-guidelines/sf-symbols/overview/][SF Symbols ]][fn:4]
**** 從 iOS 13 開始，Apple 介紹了一個名為 SFSymbols 的新功能。SF Symbols 這功能由 Apple 所設計，當中集合了 1500 多個可以在 App 之中使用的符號。[fn:3]
**** [[https://developer.apple.com/design/resources/][Download SF Symbols app]]
**** code
#+begin_src swift -r -n :eval no
import SwiftUI

struct ContentView: View {
    var body: some View {
        VStack {
            Text("System Image")
                .font(.headline)
                .foregroundColor(.orange)
            Image(systemName: "icloud")
            .resizable()
            .scaledToFit()
            .frame(width: 100, height: 80, alignment: .center)
        }
    }
}

struct ContentView_Previews: PreviewProvider {
    static var previews: some View {
        ContentView()
    }
}
#+end_src

**** Demo
#+CAPTION: Images-1
#+LABEL:fig:Images-1
#+name: fig:Images-1
#+ATTR_LATEX: :width 300
#+ATTR_ORG: :width 300
#+ATTR_HTML: :width 300
[[file:images/image-1.jpg]]

*** Customized Image 語法
1) Drag image into Project folder *Assets.xcassets*
2) Add following code
#+begin_src swift -r -n :eval no
Image("ImageName") //file name in Assets.xcassets
  .resizable()
  .scaledToFit()
  .frame(width: 200, height: 160, alignment: .center)
#+end_src

*** Image Attributes
#+begin_src swift -r -n :eval no
import SwiftUI

struct ContentView: View {
    var body: some View {
        VStack {
            Text("Albert Camus")
                .font(.title)
                .foregroundColor(.white)
                .background(Color.orange)
            Image("Albert-Camus")
                .resizable()
                .scaledToFill()
                .frame(width: 200, height: 200, alignment: .center)
                .clipShape(Circle())

        }
    }
}

struct ContentView_Previews: PreviewProvider {
    static var previews: some View {
        ContentView()
    }
}
#+end_src
#+CAPTION: Images-2
#+LABEL:fig:Images-2
#+name: fig:Images-2
#+ATTR_LATEX: :width 300
#+ATTR_ORG: :width 300
#+ATTR_HTML: :width 300
[[file:images/image-2.jpg]]

*** Using SF Symbols
- SF Symbols app
- [[https://sfsymbols.com/][sfsymbols.com]]
- [[https://www.avanderlee.com/swift/sf-symbols-guide/][SF Symbols: The benefits and how to use them guide]]

** Button
*** 語法
#+begin_src swift -r -n :eval no
//...
Button("Title") {
    //action
}

Button(action: <#T##() -> Void#>, label: <#T##() -> _#>)
//...
#+end_src
*** 將變數加入 View 中
#+begin_src swift -r -n :eval no
struct ContentView: View {
    var title = "Hello SWiftUI"

    var body: some View {
        VStack {
            Text(verbatim: title)
                .padding(4)
                .foregroundColor(.white)
                .background(Color.gray)
        }
    }
}
#+end_src
*** 問題：可否於程式中改變 title 的值來改變 View 的顯示內容?
*** @State
#+begin_src swift -r -n :eval no
struct ContentView: View {
    @State var title = "Hello SWiftUI"

    var body: some View {
        VStack {
            Text(verbatim: title)
                .padding(4)
                .foregroundColor(.white)
                .background(Color.gray)
        }
    }
}
#+end_src
View 為 struct，未加上 @State 的變數是不允許變更的(immutable)；加了 @State 後，SwiftUI 將認為這個變數(或，struct 的 property)代表某種影將 View 畫面或內容的狀態，並在背後另外產生空間儲存 property 的內容，它不再儲存在 ContentView 裡，因此我們可以修改它的內容[fn:5]。

以 @State 宣告的 property 有個重要的特性，只要它的內容改變，畫面也會立即更新。它帶來了以下兩個好處:
- 不用另外寫 property 內容改變時更新畫面的程式。
- 不用擔心畫面顯示的內容跟 property 的內容不同步，比方修改了 property，但卻忘了更新畫面。

**** 問題：在什麼地方去改變 title 的值？ --> Button
*** 範例: 按下 Button，改變 Text title
#+begin_src swift -r -n :eval no
struct ContentView: View {
    @State var title = "Hello SWiftUI"

    var body: some View {
        VStack {
            Text(verbatim: title)
                .padding(4)
                .foregroundColor(.white)
                .background(Color.gray)
            Button("Click Me") {
                self.title = "QQ"
            }
        }
    }
}
#+end_src
*** 問題：可否自行輸入要更改的 title 內容？ --> TextField + $var

** TextField
*** 語法
#+begin_src swift -r -n :eval no
@State private var 變數="值"
TextField("提示文字", text: $變數)
#+end_src

*** 範例: 於 TextField 輸入資料，顯示於 Text 中
#+begin_src swift -r -n :eval no
import SwiftUI

struct ContentView: View {
    @State private var title = "" (ref:StateVar)

    var body: some View {
        VStack {
            Text(verbatim: "Hello "+title) (ref:strTitle)
            HStack {
                Text("Your Name: ")
                TextField("請輸入姓名:", text: $title) (ref:dollarSign)

            }
        }
    }
}
#+end_src
在上述程式中，我們希望在 *TextField* 中輸入文字時就能即時改變 title 的值，便要做綁定(Binding)的動作，也就是在 *TextField* 中 title 前加上一個$ (第[[(dollarSign)]]行)，由 *TextField* 的語法也可以看出: TextField(<titleKey: LocalizedStringKey, text: Binding<String>)。SwiftUI 便是透過「在@State property 前加上$」的方式來取得這個 property 的 binding，當第[[(dollarSign)]]的值一改變，第[[(strTitle)]]行的 Text 也會即時跟著改變，這便是 binding 的作用。

除了 *TextField* 之外，SwiftUI 還有許多提供 *Binding* 的元件，例如：Toggle, Slider, DatePicker...。

*** Demo
#+CAPTION: Button
#+LABEL:fig:Button-1
#+name: fig:Button-1
#+ATTR_LATEX: :width 300
#+ATTR_ORG: :width 300
#+ATTR_HTML: :width 300
[[file:images/txtfield-1.jpg]]

*** @State
單一 view 內讓不同的 object 共享變數

** some view

** SubView
*** 自行改寫
*** Extract Subview

** @State v.s. @Bidning
#+begin_src swift -r -n :eval no
struct ContentView: View {
    var isRain = true
    var body: some View {
        VStack {
            Image(systemName: isRain ? "cloud.rain.fill" : "sun.max.fill")
                .resizable()
                .frame(width: 100, height: 100)
            Text(isRain ? "我們淋著大雨不知何時才能放晴" : "太陽公公出來了，他對我呀笑呀笑")

            Button("今天天氣如何 ?") {
                self.isRain = Bool.random() (ref:immutable)
            }
        }
    }
}
#+end_src

上述程式中第[[(immutable)]]行會產生 *Cannot assign to property: self is immutable* 的錯誤，因為 Swift 的 view 為 struct 定義，而 struct 為 value type，故無法在 computed property 裡 getter & function 中修改其 property.

修正方式為：在 isRain 最前面加上@State，如
#+begin_src swift -r -n :eval no
// ...
@State var isRain = true
//...
#+end_src

** TODO onAppear(perform:)
View 秀出時要額外做哪些事情....

** 學習資源
- [[https://developer.apple.com/tutorials/swiftui/creating-and-combining-views][SwiftUI Tutorials from Apple (官方基本教材)]]
- [[https://swiftdoc.org/][swiftdoc.org]]
- [[http://swiftdeveloperblog.com/code-examples/][Swift Developer Blog]]
- [[https://www.hackingwithswift.com/quick-start/swiftui][Hacking with SWIFT]]
- [[https://medium.com/@ivanchemical/swift-ui-social-network-c27a67078d62][Swift UI social network]]
#+latex:\newpage

* Customize UI Components
:PROPERTIES:
:CUSTOM_ID: SW-CUSTOMIZED-UI-COMPONENTS
:END:
SwiftUI 提供豐富的 modifier 幫助我們設計客製 UI 元件的樣式，諸如陰影，旋轉等效果皆可透過 modifier 實現，還可以搭配方便的拖曳加入相關程式碼。[fn:6]

** Text
*** Advanced Attributes [fn:6]
#+begin_src swift -r -n :eval no
struct ContentView: View {
    var body: some View {
        Text("Example")
          .font(.title)
          .fontWeight(.bold)
          .foregroundColor(Color.white)
          .padding(4)
          .background(Color.gray)
          .cornerRadius(14.0)
          .rotationEffect(Angle(degrees: 15))
          .rotation3DEffect(Angle(degrees: 30), axis: (x: 10, y: 30, z: 30))
          .shadow(radius: 20)
    }
}
#+end_src
*** Demo
#+CAPTION: Text Attributes
#+LABEL:fig:Adv-Text_Attributes
#+name: fig:Adv-Text_Attributes
#+ATTR_LATEX: :width 300
#+ATTR_ORG: :width 300
#+ATTR_HTML: :width 300
[[file:images/adv-text-attributes.jpg]]

** Image
*** Advanced Attributes s[fn:7]
#+begin_src swift -r -n :eval no
import SwiftUI

struct ContentView: View {
    var body: some View {
        VStack {
            Text("Albert Camus")
              .font(.body)
              .foregroundColor(.white)
              .background(Color.orange)
            Image("Albert-Camus")
              .resizable()
              .scaledToFill()
              .frame(width: 100, height: 100, alignment: .center)
              .clipShape(Circle())
            Image(systemName: "alarm.fill")
              .resizable()
              .scaledToFill()
              .frame(width: 100, height: 100, alignment: .center)
            Image("Albert-Camus")
              .frame(width: 100, height: 100, alignment: .center)
              .mask(Image(systemName: "alarm.fill")
                      .resizable()
                      .scaledToFit())
              .shadow(radius: 20)
        }
    }
}

struct ContentView_Previews: PreviewProvider {
    static var previews: some View {
        ContentView()
    }
}

#+end_src
*** Demo
#+CAPTION: Image Attributes
#+LABEL:fig:Adv-Image-Attributes
#+name: fig:Adv-Image-Attributes
#+ATTR_LATEX: :width 300
#+ATTR_ORG: :width 300
#+ATTR_HTML: :width 300
[[file:images/image-advanced-attributes.jpg]]

** Button
*** Advanced Attributes [fn:8]
#+begin_src swift -r -n :eval no
import SwiftUI

struct ContentView: View {
    var body: some View {
        VStack(spacing: 5.0) {
            Text("Customized Button")
              .font(.body)
              .foregroundColor(.white)
              .background(Color.orange)
            Button(action: {
                       print("Hello button tapped!")
                   }) {
                Text("HI HI")
                  .fontWeight(.bold)
                  .font(.title)
                  .foregroundColor(.purple)
                  .padding()
                  .border(Color.purple, width: 5)
            }
            Button(action: {
                       print("Hello button tapped!")
                   }) {
                Text("Press me")
                  .fontWeight(.light)
                  .font(.title)
                  .foregroundColor(.green)
                  .padding(5)
                  .overlay(
                    Capsule(style: .continuous)
                      .stroke(Color.green, style: StrokeStyle(lineWidth: 3, dash: [10]))
                  )
            }
        }
    }
}

#+end_src
*** Demo
#+CAPTION: Button Attributes
#+LABEL:fig:Adv-Button-Attributes
#+name: fig:Adv-Button-Attributes
#+ATTR_LATEX: :width 300
#+ATTR_ORG: :width 300
#+ATTR_HTML: :width 300
[[file:images/customized-button-1.jpg]]

** Button, Divider
#+begin_src swift -r -n :eval no
//
//  ContentView.swift
//  uitest
//
//  Created by yen yung chin on 2020/7/29.
//  Copyright © 2020 Letranger.tw. All rights reserved.
//

import SwiftUI

struct ContentView: View {
    @State private var a = ""
    @State private var b = ""
    @State private var c = "Ans:"

    var body: some View {
        VStack {
            VStack {
                Divider()
                TextField("Number 1: ", text: $b)
                Divider()
                TextField("Number 2:", text: $a)
                Divider()
                Button("➕") {
                    let one = Int(self.a) ?? 0
                    let two = Int(self.b) ?? 0
                    self.c = "Ans: " + String(one + two)
                }
                  .frame(width: 40, height: 30, alignment: .center)
                  .foregroundColor(.white)
                  .background(Color.green)
                  .font(.largeTitle)
                Divider()
                Text(verbatim: c)
                  .foregroundColor(.gray)
            }
              .frame(width: 200, height: 160, alignment: .center)
        }
    }
}
#+end_src
#+CAPTION: Button
#+LABEL:fig:Button-1
#+name: fig:Button-1
#+ATTR_LATEX: :width 300
#+ATTR_ORG: :width 300
#+ATTR_HTML: :width 300
[[file:images/btn-1.jpg]]

** background, opacity
#+begin_src swift -r -n :eval no
//
//  ContentView.swift
//  uitest
//
//  Created by yen yung chin on 2020/7/29.
//  Copyright © 2020 Letranger.tw. All rights reserved.
//

import SwiftUI

struct ContentView: View {
    @State private var a = ""
    @State private var b = ""
    @State private var c = "Ans:"

    var body: some View {
        VStack(alignment: .center) {
            Text("計算機")
            Divider()
            TextField("Number 1: ", text: $b)
            Divider()
            TextField("Number 2:", text: $a)
            Divider()
            Button("➕") {
                let one = Int(self.a) ?? 0
                let two = Int(self.b) ?? 0
                self.c = "Ans: " + String(one + two)
            }
              .frame(width: 40, height: 30, alignment: .center)
              .foregroundColor(.white)
              .background(Color.white)
              .font(.largeTitle)
            Divider()
            Text(verbatim: c)
              .foregroundColor(.black)


        }
          .padding(60)
          .background(Image("background").resizable().scaledToFill())
          .opacity(0.9)
    }
}
struct ContentView_Previews: PreviewProvider {
    static var previews: some View {
        ContentView()
    }
}


#+end_src
#+CAPTION: Background
#+LABEL:fig:Background-1
#+name: fig:Background-1
#+ATTR_LATEX: :width 300
#+ATTR_ORG: :width 300
#+ATTR_HTML: :width 300
[[file:images/background-1.jpg]]
** Further reading
- [[https://www.simpleswiftguide.com/advanced-swiftui-button-styling-and-animation/][Advanced SwiftUI button styling and animation]]

* List
:PROPERTIES:
:CUSTOM_ID: list
:END:
** What is List
#+begin_src swift -r -n :results output :exports nil
struct ContentView: View {
    var body: some View {
        List {
            Text("Hello world.")
            Text("Hello world.")
            Text("Hello world.")
        }
    }
}
#+end_src

** 準備單一 cell 格式
#+begin_src swift -r -n :eval no
import SwiftUI

struct ContentView: View {
    var body: some View {
        HStack {
            Image(systemName: "book")
              .resizable()
              .frame(width: 30, height: 30, alignment: .center)
            VStack(alignment: .leading) {
                Text("Artificial Intelligence: A Modern Approach")
                  .multilineTextAlignment(.leading)
                  .foregroundColor(Color.green)
                Text("Stuart Russell and Peter Norvig")
                  .multilineTextAlignment(.leading)
                  .foregroundColor(Color.orange)
            }
        }
    }
}

#+end_src
#+CAPTION: Single cell
#+LABEL:fig:single-cell
#+name: fig:single-cell
#+ATTR_LATEX: :width 300
#+ATTR_ORG: :width 300
#+ATTR_HTML: :width 300
[[file:images/single-cell.jpg]]

** 轉入 List 格式(靜態 List)
*** 將最外層的 VStack 加入 List 中
#+CAPTION: List-1
#+LABEL:fig:list-1
#+name: fig:list-1
#+ATTR_LATEX: :width 400
#+ATTR_ORG: :width 400
#+ATTR_HTML: :width 500
[[file:images/list-1.jpg]]
*** list 語法
#+begin_src swift -r -n :eval no
import SwiftUI

struct ContentView: View {
    var body: some View {
        List(0 ..< 5) { item in
            Image(systemName: "book")
              .resizable()
              .frame(width: 30, height: 30, alignment: .center)
            VStack(alignment: .leading) {
                Text("Artificial Intelligence: A Modern Approach")
                  .multilineTextAlignment(.leading)
                  .foregroundColor(Color.green)
                Text("Stuart Russell and Peter Norvig")
                  .multilineTextAlignment(.leading)
                  .foregroundColor(Color.orange)
            }
        }
    }
}
#+end_src
*** 結果
#+CAPTION: List-2
#+LABEL:fig:list-2
#+name: fig:list-2
#+ATTR_LATEX: :width 400
#+ATTR_ORG: :width 400
#+ATTR_HTML: :width 500
[[file:images/list-2.jpg]]

** 建立 list 來源資料(動態 List) [fn:3]
#+begin_verse
In order to handle dynamic items, you must first tell SwiftUI how it can identify which item is which. This is done using the Identifiable protocol, which has only one requirement: some sort of id value that SwiftUI can use to see which item is which. [fn:9]
#+end_verse
#+begin_src swift -r -n :eval no
import SwiftUI

//建立book struct
struct Book: Identifiable {
    var id = UUID()
    var title: String
    var author: String
    var image: String
}

struct ContentView: View {
    var books = [
      Book(id: UUID(), title: "地獄藍調", author: "李查德", image: "b1"),
      Book(id: UUID(), title: "至死方休", author: "李查德", image: "b2"),
      Book(id: UUID(), title: "一觸即發", author: "李查德", image: "b3"),
      Book(id: UUID(), title: "索命訪客", author: "李查德", image: "b4"),
      Book(id: UUID(), title: "闇夜回聲 ", author: "李查德", image: "b5")]

    //.....
}
#+end_src

** 將資料連結到列表中 [fn:3]
#+begin_src swift -r -n :eval no
import SwiftUI

//....
var body: some View {
    List(books) { book in
        Image(book.image)
          .resizable()
          .frame(width: 40, height: 40, alignment: .center)
        VStack(alignment: .leading) {
            Text(book.title)
              .multilineTextAlignment(.leading)
              .foregroundColor(Color.green)
            Text(book.author)
              .multilineTextAlignment(.leading)
              .foregroundColor(Color.orange)
        }
    }
}
}
#+end_src

** 結果
#+CAPTION: List-3
#+LABEL:fig:list-3
#+name: fig:list-3
#+ATTR_LATEX: :width 300
#+ATTR_ORG: :width 300
#+ATTR_HTML: :width 300
[[file:images/list-3.jpg]]

** 為什麼要加入 id 與 Identifiable
- Identifiable: 允許 Array 中有重複值
- id: 明確區分重複值
- UUID: 自動生成 unique 值
- 詳細說明如[[https://medium.com/flawless-app-stories/swiftui-dynamic-list-identifiable-73c56215f9ff][SwiftUI - Dynamic List & Identifiable]]

** Reading source
- [[https://www.youtube.com/watch?v=bz6GTYaIQXU][SwiftUI Basics: Dynamic Lists, HStack VStack, Images with Circle Clipped Stroke Overlays]]
- [[https://developer.apple.com/tutorials/swiftui/building-lists-and-navigation][Building Lists and Navigation]]

#+latex:\newpage

* Passing data between Views #1: @State and @Binding
:PROPERTIES:
:CUSTOM_ID: StateBinding
:END:
** @State
- State is a value, or a set of values, that can change over time, and that affects a view’s behavior, content, or layout. You use a property with the @State attribute to add state to a view.
- 通過使用 @State 修飾器我們可以關聯出 View 的狀態. SwiftUI 將會把使用過 @State 修飾器的屬性存儲到一個特殊的內存區域(heap)，並且這個區域和 View struct 是隔離的. 當 @State 裝飾過的屬性發生了變化，SwiftUI 會根據新的屬性值重新創建View。[fn:10]
- Simple properties like String or Int
- Belongs to a specific view
- Never used outside that view
- The wrappedValue is: anything (but almost certainly a value type).
- What it does: stores the wrappedValue in the heap; when it changes, invalidates the View.
- Projected value (i.e. $): a Binding (to that value in the heap).

** @Binding
- @Binding is one of SwiftUI’s less used property wrappers, but it’s still hugely important: it lets us declare that one value actually comes from elsewhere, and should be shared in both places. This is not the same as @ObservedObject or @EnvironmentObject, both of which are designed for reference types to be shared across potentially many views.[fn:11]
- 有時候我們會把一個視圖的屬性傳至子節點中，但是又不能直接的傳遞給子節點，因為在 Swift 中值的傳遞形式是值類型傳遞方式，也就是傳遞給子節點的是一個拷貝過的值。但是通過 @Binding 修飾器修飾後，屬性變成了一個引用類型，傳遞變成了引用傳遞，這樣父子視圖的狀態就能關聯起來了。[fn:10]
- The wrappedValue is: a value that is bound to something else.
- What it does: gets/sets the value of the wrappedValue from some other source.
- What it does: when the bound-to value changes, it invalidates the View.
- Projected value (i.e. $): a Binding (self; i.e. the Binding itself)

** Time to use Binding
Bindings are all about having a *single source of the truth (data)!*.
- Getting text out of a TextField
- Using a Toggle or other state-modifying UI element
- Finding out which ittem in a NavigationView was chosen.
- Find out whether we're being targeted with a Drag
- Binding our gesture to the .updating function of a gesture.

** Demo 1: @State v.s. @Bidning
透過@State 與@Bidning, ContentView.swift 可以將變數 switchIsOn pass 給 SwitchView.swift，而後者可以藉由更改變數值來改變 ContentView.swift 的顯示結果。
*** ContentView.swift
#+begin_src swift -r -n :eval no
import SwiftUI

struct ContentView: View {
    @State var switchIsOn = false

    var body: some Vie {
        VStack {
            Text(switchIsOn ? "-_-" : "^_^")
            SwitchView(switchIsOn: $switchIsOn)
        }
    }
}
#+end_src
*** SwitchView.swift
#+begin_src swift -r -n :eval no
import SwiftUI

struct SwitchView: View {
    @Binding var swtichIsOn: Bool

    var body: some View {
        Toggle(isOn: $switchIsOn, label: {
            Text(switchIsOn ? "ON" : "OFF")
        })
    }
}
#+end_src

** Demo 2: sharing data between Views
目的：在 ContentView 中按下 Button，至 Order View 輸入下單內容，最後將下單內容傳回 ContentView
*** ContentView.swift: Version-1
#+begin_src swift -r -n :results output :exports nil
struct ContentView: View {
    var body: some View {
        VStack {
            Button("下單") {
            }
        }
    }
}
#+end_src
*** Order.swift
於主程式ContentView中click button 後，秀出目標 View (order), 下單 View 內容為：
#+begin_src swift -r -n :results output :exports nil
import SwiftUI

struct Order: View {
    @Binding var orders:String (ref:bindBack)
    var body: some View {
        VStack {
            Text("下單區")
            TextField("請輸入要購買的物品", text: $orders)
              .textFieldStyle(RoundedBorderTextFieldStyle())
              .padding()
        }
    }
}

struct Order_Previews: PreviewProvider {
    static var previews: some View {
        Order(orders: .constant("")) (ref:ordersPassing)
    }
}

#+end_src
程式中第[[(bindBack)]]行的 orders 為儲存下單內容的字串，並於稍後將字串內容傳回主程式，故這個 property 主要是來自 ContentView 中的某一個變數(property)，並在 ContentView 呼叫(或秀出)order View 時要交待清楚變數來源(傳遞參數)。這也可以從底下的 Order_previews 在要呼叫 Order 時會被強迫填入一個參數(第[[(ordersPassing)]]行)看出其呼叫方式。
*** ContentView.swift: Version-2
而此時的 ContentView 再加入呼叫 Order 以及準備傳過去的參數，其內容如下(應該是要先在 ContentView 宣告好這個參數，不過此處先依反向順序進行以利說明)：
#+begin_src swift -r -n :results output :exports nil
struct ContentView: View {
    @State private var isPresented: Bool = false (ref:initIsP)
    @State private var orderContent: String = ""
    var body: some View {

        VStack {
            Button("下單") {
                self.isPresented = true
            }.sheet(isPresented: self.$isPresented, content: {
                                                        Order(orders: $orderContent) (ref:callOrder)
                                                    })
            Text(orderContent)
        }
    }
}
#+end_src

ContentView 的第[[(callOrder)]]行呼叫 Order 並將本身的 property(orderContent)傳過去，而 isPresented 是用來控制 Order 秀出與否，故在一開始其初值設定為 false(第[[(initIsP)]]行)，等到 Button 被按下後再變更內容為 true，秀出下單 View 的內容(可以實驗一下將 isPresented 初值設定為 true，觀察實驗結果)。

#+LATEX:\newpage

* Alert
:PROPERTIES:
:CUSTOM_ID: Alert
:END:
目的: 跳出對話視窗
** 以 Buuton 觸發
和呼叫其他 View 一樣，仍然是以一個 bool 來控制是否秀出 Alert
#+begin_src swift -r -n :results output :exports nil
struct SecondView: View {
    @State private var showAlert:Bool = false
    var body: some View {
        Button("請按我") {
            showAlert = true
        }.alert(isPresented: $showAlert, content: {
                                             return Alert(title: Text("別亂按"))
                                         })
    }
}
#+end_src

** 以 TextField 觸發
將控制顯示的 boo 值寫在 *onCommit*
#+begin_src swift -r -n :results output :exports nil
struct SecondView: View {
    @State private var title:String = ""
    @State private var showAlert:Bool = false
    var body: some View {
        TextField("To be or not to be", text: $title, onCommit:  {
                                                          showAlert = true
                                                      })
          .alert(isPresented: $showAlert, content: {
                                              return Alert(title: Text("\(title)"))
                                          })

    }
}
#+end_src

#+LATEX: \newpage

* Navigation Views: Tabbed View
Tab bar 是在 App 螢幕底部出現的欄，提供了在不同的版面之間進行快速切換的途徑。Tab bar 的背景顏色是半透明，可以有調色。Tab bar 在所有螢幕尺寸都保持一樣的高度，並且在鍵盤時出現會隱藏起來。

一個 tab bar 可以包含無數個 tab，但可以能容納的數量視乎根據手機/平板的大小，以及橫、豎屏模式都會有所影響。在空間的限制下，當某些 tab 無法被顯示時，最後一個 tab 會變成“更多”(More)， 通過這個 tab 可以到另一個獨立的列表頁面，那裡會列出所有無法被顯示的 tab。[fn:12]

** Create subView
#+begin_src swift -r -n :results output :exports nil
// create StoreView, AboutView, NewsView first
struct ContentView: View {
    @ObservedObject var user = User()

    init() {
        UITabBarItem.appearance().setTitleTextAttributes([.font: UIFont.systemFont(ofSize: 16) ], for: .normal)
    }

    var body: some View {
        TabView {
            StoreView().tabItem {
                Image(systemName: "cart.fill.badge.plus")
                Text("購買")
            }
            AboutView().tabItem {
                Image(systemName: "person.3")
                Text("關於")
            }
            NewsView().tabItem {
                Image(systemName: "message")
                Text("消息")
            }
        }.accentColor(.pink)    }
}
#+end_src

** customize tab bar
*** Change tabView font size
#+begin_src swift -r -n :results output :exports nil
init() {
    UITabBarItem.appearance().setTitleTextAttributes([.font: UIFont.systemFont(ofSize: 14) ], for: .normal)
}

#+end_src
*** the color of unselected tab bar
#+begin_src swift -r -n :results output :exports nil
init() {
    UITabBar.appearance().unselectedItemTintColor = UIColor.systemGray3
}
#+end_src
*** the color of the tab bar item : .accentColor
#+begin_src swift -r -n :results output :exports nil
TabView {

}.accentColor(.pink)
#+end_src
*** the tab bar’s color: appearance()
兩種做法(尚未區分 backgroundColor 與 barTintColor 之差異)
**** init()
#+begin_src swift -r -n :results output :exports nil
init() {
        UITabBar.appearance().barTintColor = UIColor.systemPink
    }
#+end_src
**** onAppear()
與 init()共用時，onAppear()優先
#+begin_src swift -r -n :results output :exports nil
.onAppear() {
    UITabBar.appearance().barTintColor = .white
}
#+end_src

** Switching Between Tabs Programmatically
Users can tap the tab bar items to switch between tabs, which is automatically handled the TabView. In some use cases, you may want to switch to a specific tab programmatically. The TabView has another init method for this purpose. The method takes a state variable which associates with the tag value of the tabs.[fn:13]
#+begin_src swift -r -n :results output :exports nil
TabView(selection: $selection)
#+end_src
As an example, declare the following state variable in ContentView:
#+begin_src swift -r -n :results output :exports nil
@State private var selection = 0
#+end_src
Here we initialize the selection variable with a value of 0, which is the tag value of the first tab item. We haven’t defined the tag value for the tab items yet. Therefore, update the code like this and attach the tag modifier for each of the tab items:
#+begin_src swift -r -n :results output :exports nil
import SwiftUI

struct BookDetailView: View {
    var body: some View {
        Text("This is the Book Detail View")
    }
}

struct BookOrderView: View {
    var body: some View {
        Text("購物車")
    }
}

struct BookAboutView: View {
    var body: some View {
        Text("About me")
    }
}

struct ContentView: View {
    init() {
        UITabBar.appearance().barTintColor = UIColor.systemPink
        UITabBar.appearance().unselectedItemTintColor = UIColor.systemGray3
    }
    @State private var selection = 0
    var body: some View {

        ZStack(alignment: Alignment(horizontal: .trailing, vertical: .top), content: {
            TabView(selection: $selection,
                    content:  {
                        BookDetailView().tabItem {
                            Image(systemName: "book.fill")
                            Text("Detail")
                        }.tag(0)
                        BookOrderView().tabItem {
                            Image(systemName: "cart.fill")
                            Text("Order")
                        }.tag(1)
                        BookAboutView().tabItem {
                            Image(systemName: "person")
                            Text("About")
                        }.tag(2)
                    })
                .accentColor(.white)
            Button(action: {
                selection = (selection + 1) % 3
                print(selection)
            }, label: {
                Text("Button")
                    .padding(3)
                    .background(Color.pink)
                    .foregroundColor(.white)
                    .padding(3)
            })
        })
    }
}
#+end_src

** 一個優秀的 Tab Bar 應該具備哪些特點？[fn:12]
1. 不會有太多的 tab
   每增加一個 tab 會減小了選擇各別的可觸區域，並增加 app 的複雜性，讓用戶更難找到所需的資料。即使“更多(More)”標籤可以展示額外的 tab，但這會需要額外的點擊步驟，而且沒有很好利用 tab bar 的有限空間。太少的 tab 也是問題，它會使你的界面感覺被分離。一般來說，在 iPhone 上應使用 3 至 5 個標籤，在 iPad 上則可稍微多幾個。
1. 不會經常變動
   在某個 tab 的功能無法使用時， 不要移除這個 tab 或是讓它失效。如果 tab 時有時無，App 界面會變得不穩定和難以捉摸。確保所有的 tab 都可有效點擊，並且向用戶解釋目前 tab 內容不可用的原因。譬如說，當 iOS 裝置沒有歌曲時，音樂 app 的“我的音樂”tab 會顯示如何下載歌曲的說明。
1. 應在相連接的視窗進行內容的轉換
   為了讓界面符合用戶預期，選擇一個 tab 後的作用應該直接顯示於與其 tab bar 相連的視窗，而不是螢幕上其它範圍的視窗。例如，如在左邊的 split view 選擇了一個 tab，是不會讓右半部分突然產生變化的。在 popover 中選擇的 tab 不會導致後方的視窗發生改變。
1. 應保持 icon 的風格統一和平衡
   系統提供了一系列預先設定好、一般用途的 icon，我們也可以創建自己的 icon，確保 tab bar icon 在視覺上的風格統一和平衡。
1. 應使用 badge 傳遞信息
   我們可以在 tab 上加上 badge (一個紅色橢圓上帶有白色數字或感嘆號的圖案) ，來暗示該 tab 或模式有新信息。

** Reading Resources
- [[https://www.appcoda.com/swiftui-tabview/][Customizing the Tab Bar Color]]
- [[https://www.youtube.com/watch?v=tDyvkIe9RsA][Tabbed View SwiaftUI - TabBar Tutorial & Basic Customization - Xcode 11 - 2019]]
- [[https://medium.com/@nwyyy/swift%E7%AD%86%E8%A8%98-tab-bar-2ddba7d56587][iOS筆記：Tab Bar]]
- [[https://www.simpleswiftguide.com/][Simple Swift Guide]]
#+latex:\newpage

* Navigation Views: Navigation Bar
:PROPERTIES:
:CUSTOM_ID: navigation
:END:
** Navigation bar
- 於 body 中最外層的 component 之外加入 NavigationView
- Title: navigationBarTitle()，title 置於 NavigationView {}內 attach 在 List 上，因為 NavigationView 主要負責於不同的 View 中切換，每個 View 都會有自己的 content 與 Title。
- DisplayMode 有 三類：
  1) large: 適用於 top level
  2) inline: 適用於 detail level
  3) automatic: 自動判斷有無 parent level
#+begin_src swift -r -n :eval no
import SwiftUI
  ...

struct ContentView: View {
    ....
    var body: some View {
        NavigationView {
            List(books) { book in
                ...
                }
            .navigationBarTitle(Text("書單"))
            .navigationBarTitleDisplayMode(.large)
            }
        }
    }
}
...
#+end_src
#+CAPTION: Navigation bar
#+LABEL:fig:Navigation-1
#+name: fig:Navigation-1
#+ATTR_LATEX: :width 300
#+ATTR_ORG: :width 300
#+ATTR_HTML: :width 300
[[file:images/navigation-1.jpg]]

*** Hide Navigation Bar
使用 Hide 與不設定 BarTitle 的差異在於：後者仍會佔掉 Bar 的空間
#+begin_src swift -r -n :results output :exports nil
import SwiftUI
  ...

struct ContentView: View {
    ....
    var body: some View {
        NavigationView {
            List(books) { book in
                ...
                }
            .navigationBarTitle(Text("書單"))
            .navigationBarTitleDisplayMode(.large)
            .navigationBarHidden(true)
            }
        }
    }
}
...
#+end_src

**** NavigationLink
***** Create
***** 語法:
#+begin_src swift -r -n :results output :exports both
NavigationLink(<title: StringProtocol, destination:)
#+end_src
***** 方式
1. Attach link in NavigationLink()
 #+begin_src swift -r -n :results output :exports nil
struct ContentView: View {
    var body: some View {
        NavigationView {
            VStack {
                NavigationLink("JumpToSecond", destination: SecondView())
                Text("Hello, world!")
                    .padding()
            }
            .navigationTitle("Book List")
            .navigationBarTitleDisplayMode(.large)
        }
    }
}
#+end_src
2. Attach link to other object(Text in this example)
#+begin_src swift -r -n :results output :exports nil
struct ContentView: View {
    var body: some View {
        NavigationView {
            VStack {
                NavigationLink(destination: SecondView()) {
                    Text("TextLink")
                        .padding()
                }
            }
            .navigationTitle("Book List")
            .navigationBarTitleDisplayMode(.large)
        }
    }
}
#+end_src
若是將 link attach 至 image，則要加上 renderingMode，否則會看不到圖，例：
#+begin_src swift -r -n :results output :exports nil
struct ContentView: View {
    var body: some View {
        NavigationView {
            VStack {
                NavigationLink(destination: SecondView()) {
                    Image(systemName: "myImage")
                        .renderingMode(.original)
                }
            }
            .navigationTitle("Book List")
        }
    }
}
#+end_src

**** Reading
- [[https://www.youtube.com/watch?v=nA6Jo6YnL9g][The Complete Guide to NavigationView in SwiftUI]]

** Create New Views
*** in same file
#+begin_src swift -r -n :results output :exports nil
import SwiftUI

struct BookDetailView: View {
    var body: some View {
        Text("This is the Book Detail View")
    }
}

struct ContentView: View {
    var body: some View {
        NavigationView {
            VStack {
                NavigationLink(destination: BookDetailView()) {
                    Text("GoToDetail")
                }
            }
              .navigationTitle("Book List")

        }
    }
}
#+end_src
**** class exercise
為上述 NavigationView 加入另外兩個 subView: OrderView, AboutView
*** in new file
將上述專案中的每個 subView 改為獨立 View

** Passing parameter(單純參數傳遞)
Single way, Just pass variable from A to B.
#+begin_src swift -r -n :results output :exports nil
struct BookDetailView: View {
    var operation: String
    var body: some View {
        Text("已為你\(operation)這本書")
    }
}

struct ContentView: View {
    var body: some View {
        NavigationView {
            VStack {
                NavigationLink(destination: BookDetailView(operation: "借閱")) { Text("Loan")
                }
                NavigationLink(destination: BookDetailView(operation: "續借")) { Text("Renew")
                }
                NavigationLink(destination: BookDetailView(operation: "歸還")) { Text("Return")
                }
            }
              .navigationTitle("Book List")

        }
    }
}
#+end_src

** Version-1: Navigation v.s. List v.s. NavigationLink
#+begin_src swift -r -n :eval no
//
//  ContentView.swift
//  navigation
//
//  Created by yen yung chin on 2020/9/27.
//

import SwiftUI

struct Book: Identifiable {
    var id = UUID()
    var title: String
    var author: String
}

struct ContentView: View {
    var books = [
        Book(title:"X的悲劇", author: "艾勒里．昆恩"),
        Book(title:"地獄藍調", author: "李查德"),
        Book(title:"東方列車謀殺案", author: "阿嘉莎‧克莉絲蒂"),
        Book(title:"八百萬種死法", author: "勞倫斯.卜洛克"),
        Book(title:"血字研究", author: "柯南道爾")
    ]

    var body: some View {
        NavigationView {
            List(books) { book in
                NavigationLink(destination: DetailView(book: book) ){
                        bookRow(book: book)
                    }
                }
            .navigationTitle("書單")
        }
    }
}

struct bookRow: View {
    var book: Book
    var body: some View {
        VStack {
            Text(book.title)
            Text(book.author)
        }
    }
}

struct DetailView: View {
    var book: Book
    var body: some View {
        VStack {
            Text(book.title)
        }
    }
}

struct ContentView_Previews: PreviewProvider {
    static var previews: some View {
        ContentView()
    }
}

#+end_src

** Version-2:
將記錄架構(Book.swift)、List(ContentView.swift)以及 Detail(DetailView.swift)各自以獨立檔案設計。
*** Book.swift
#+begin_src swift -r -n :eval no
// 不涉及使用者界面

import Foundation

// 建立一個書籍的基本結構
// 加上Identifiable以及UUID()是為了可以將書籍透過List來呈現

struct Book: Identifiable {
    var id = UUID() //產生一個唯一(unique)的亂數
    var title: String
    var author: String
    var image: String
}
#+end_src
*** ContentView.swift
#+begin_src swift -r -n :eval no
import SwiftUI

struct ContentView: View {
    // 在這裡臨生產生一個Book陣列，然後在List秀出來
    var books = [
        Book(id: UUID(), title: "地獄藍調", author: "李查德", image: "b1"),
        Book(id: UUID(), title: "至死方休", author: "李查德", image: "b2"),
        Book(id: UUID(), title: "一觸即發", author: "李查德", image: "b3"),
        Book(id: UUID(), title: "索命訪客", author: "李查德", image: "b4")
    ]

    var body: some View {
        NavigationView {
            List(books) { book in
                NavigationLink(destination: DetailView(thisbook: book)) {
                    VStack(alignment: .leading) {
                        Text(book.title)
                            .font(.title)
                        Text(book.author)
                            .font(.subheadline)
                    }
                .navigationBarTitle("我的書單")
                }
            }
        }
    }
}

struct ContentView_Previews: PreviewProvider {
    static var previews: some View {
        ContentView()
    }
}
#+end_src
#+CAPTION: 主選單
#+LABEL:fig:Navi-List-1
#+name: fig:Navi-List-1
#+ATTR_LATEX: :width 300
#+ATTR_ORG: :width 300
#+ATTR_HTML: :width 300
[[file:images/Navi-List-1.png]]
*** DetailView.swift
#+begin_src swift -r -n :eval no
import SwiftUI

struct DetailView: View {
    //我希望等一下有任何人呼叫我，一定要傳書本的資料給我
    var thisbook: Book
    var body: some View {
        VStack {
            Image(thisbook.image)
            Text(thisbook.title)
            Text(thisbook.author)
        }

    }
}

struct DetailView_Previews: PreviewProvider {
    static var previews: some View {
        // 臨時給個資料，讓preview可以秀出來就好

        DetailView(thisbook: Book(id: UUID(), title: "索命訪客", author: "李查德", image: "b4"))
    }
}
#+end_src
#+CAPTION: Detail
#+LABEL:fig:Navi-List-2
#+name: fig:Navi-List-
#+ATTR_LATEX: :width 300
#+ATTR_ORG: :width 300
#+ATTR_HTML: :width 300
[[file:images/Navi-List-2.png]]

#+latex:\newpage

* Passing data between Views #2: @EnvironmentObject
:PROPERTIES:
:CUSTOM_ID: EnvironmentObject
:END:
Create once, access everywhere, 適用情境：app 中某些 property 需要於很多 View 中存取，例如，app 的 setting.

** @ObservedObject
- Can be shared across views
- More complex properties (e.g custom type)
- External reference type that has to be managed (Create an instance of the class, create its own properties, ...)
- Class should confrom to *ObservableObject*
- *@Published* property wrapper used to mark properties that should force a view to refresh
- The wrappedValue is: anything that implements the OvservableObject protocol (ViewModels basicly).
- What is does: invalidates the View when wrappedValue does objectWillChange.send().
- Projected value (i.e. %): a Binding (to the vars of the wrappedValue (a ViewModel)). You can bind a variable in your View to the variable in your ViewModel with @ObservedObject.
- @ObservedObject 的用處和 @State 非常相似，從名字看來它是來修飾一個對象的，這個對象可以給多個獨立的 View 使用。如果你用 @ObservedObject 來修飾一個對象，那麼那個對象必須要實現 ObservableObject 協議，然後用 @Published 修飾對象裡屬性，表示這個屬性是需要被 SwiftUI 監聽的。[fn:10]
** @EnvironmentObject
- Similar to @ObservedObject
- Possibility to make it available to all views through the application itself
- If one view changes the model all views updatezz
- ThewrappedValue is: ObservvableObject obtained via .environemntObject() sent to the View.
- What is does: invalidates the View when wrappedValue does objectWillChange.send().
- Projected value (i.e. $): a Binding (to the vars of the wrappedValue (a ViewModel)).

** Demo #1: ObservaleObject
*** UserStats.swift
#+begin_src swift -r -n :eval no
import Foundation
import SwiftUI
import Combine

class UserStats: ObservableObject {
    var objectWillChange = ObservableObjectPublisher()

    var score = 0 {
        willSet {
            self.objectWillChange.send()
        }
    }
}
#+end_src
*** ScoreView.swift
#+begin_src swift -r -n :eval no
import SwiftUI

struct ScoreView: View {
    @ObservedObject var userStats = UserStats()

    var body: some View {
        VStack {
            Text("\self.userStats.score")
            Button(action: {self.userStats.score += 1}
                  , label: {
                        Text("Add Point")
                    })
        }
    }
}
#+end_src

** Demo #2: EnvironmentObject
*** UserSettings.swift (ObservableObject)
#+begin_src swift -r -n :eval no
import SwiftUI

class UserSettings: ObservableObject {
    @Published var name = ""
    // use this ObservableObject as an environment object
}
#+end_src
*** SceneDeleate.swift
add new var in SceneDelegate
#+begin_src swift -r -n :eval no
//....

var settings: UserSettings()
func scene(.......) {
    //....
    //let tabbedView = TabbedView()
    let tabbedView = TabbedView().environemntObject(settings)
}
//....
#+end_src
and now the settings is universally available throughtout the tabbed views
*** UserSettingsView.swift
#+begin_src swift -r -n :eval no
import SwiftUI

struct UserSettingsView: View {
    @EnvironmentObject var settings: UserSettings
    var body: some View {
        VStack {
            Text("My anme: \(settings.name)")
            EditView()
        }
    }
}
#+end_src
*** EditView.swift
#+begin_src swift -r -n :eval no
import SwiftUI

struct EditView: View {
    @EnvironmentObject var settings: UserSettings
    var body: some Veiw {
        TextField("Type in your name:", text: $settings.name)
    }
}
#+end_src

** Demo #3
:PROPERTIES:
:CUSTOM_ID: passingData
:END:

*** with @ObservableObject, @EnvironmentObject and @ObservedObject
#+begin_src swift -r -n :results output :exports nil
import SwiftUI

class User: ObservableObject {
    @Published var score = 0
}

struct BuyBookView: View {
    @EnvironmentObject var user: User

    var body: some View {
        Button("加購! 數量\(self.user.score)") {
            self.user.score += 1
        }
    }
}

struct ContentView: View {
    @ObservedObject var user = User()

    var body: some View {
        NavigationView {
            VStack {
                Text("mount: \(user.score)")
                NavigationLink(destination: BuyBookView() ){ (ref:buybook)
                                                             Text("Show amount, now")
                }
            }
              .navigationTitle("Book List")
        }
          .environmentObject(user) (ref:envobj)
    }
}
#+end_src
第[[(envobj)]]行的 modifier attach 於 NavigationView，所以所有以 Navigation 連接的 View 均可共享此變數。若將此 modifier attach 在 BuyBookView()後(第[[(buybook)]]行)，則只有這個 View 可存取此一變數。

** Demo #4
*** ContentView
情境說明：在 app 中建立一個 ShoppingCart 類別，這個 class 也可以獨立存在於一個檔案中，並讓這個 class confirm ObservableObject protocol，於 class 中將要在各 View 中 share 的 property 以@Published 標示出來。

在每一個要使用到這個 EnvironmentObject 的 View 中以@EnvironmentObject 來建立該 class 的 instance(第[[(environmentObject)]]行)，同時，在 previews 中也要加入 environmentObject()的 modifier(第[[(emptyConstructor)]]行)。

#+begin_src swift -r -n :results output :exports nil
import SwiftUI

class ShoppingCart: ObservableObject {
    @Published var Title = "Testing"
    @Published var items = 0
}

struct ContentView: View {

    @State private var showCart: Bool = false
    @EnvironmentObject var cart: ShoppingCart (ref:EnvironmentObject)


    var body: some View {
        VStack {
            Text(cart.Title)
            Spacer()
            Button("下單") {
                self.showCart = true
            }.sheet(isPresented: self.$showCart, content: {
                                                     SecondView()
                                                 })

            Text("目前數量\(self.cart.items)")
            Spacer()
            TextField("Change Title", text: $cart.Title)
              .textFieldStyle(RoundedBorderTextFieldStyle())
              .padding()
            Spacer()
        }
    }
}

struct ContentView_Previews: PreviewProvider {
    static var previews: some View {
        ContentView().environmentObject(ShoppingCart()) (ref:emptyConstructor)
    }
}
#+end_src
*** SecondView
同樣的，在 SecondView 中要使用到 environment object 也要以@EnvironmentObject 來宣告利用該 class 所建立的 instance(第[[(useEnv)]]行)，而 SecondView 的 preview 也要加上同樣的 modifier(傳入參數)。
#+begin_src swift -r -n :results output :exports nil
import SwiftUI

struct SecondView: View {
    @EnvironmentObject var cart: ShoppingCart (ref:useEnv)

    var body: some View {
        Text("\(cart.Title)")
        Spacer()
        Button("加購! 數量\(self.cart.items)") {
            self.cart.items += 1
        }
        Spacer()
    }
}

struct SecondView_Previews: PreviewProvider {
    static var previews: some View {
        SecondView().environmentObject(ShoppingCart())
    }
}
#+end_src
這裡的 cart.items 在變更後，ContentView 的數量會即時更新，同樣的，ContentView 中被變更的 Title 也會即時在 SecondView 中看出結果。

#+LATEX: \newpage

** Ways to share Data between Views
Three ways for sharing data in SwiftUI[fn:14]
+------------------------------+------------------------------+------------------------------+
|@State                        |@ObservedObject               |@EnvironmentObject            |
+------------------------------+------------------------------+------------------------------+
|Simple properties like String |Can be shared across views    |Similar to @ObservedObject    |
|or Int                        |                              |                              |
+------------------------------+------------------------------+------------------------------+
|Belongs to a specific view    |More complex properties (e.g. |Possiblity to make it         |
|                              |custom type)                  |available to all views through|
|                              |                              |the application itself        |
+------------------------------+------------------------------+------------------------------+
|Never used outside that view  |External reference type that  |If one view changes the model |
|                              |has to be managed (Create an  |all views update              |
|                              |instance of the class, create |                              |
|                              |its own properties, ...)      |                              |
+------------------------------+------------------------------+------------------------------+
|                              |Class should conform to       |                              |
|                              |ObservableObject              |                              |
+------------------------------+------------------------------+------------------------------+
|                              |@Published property wrapper   |                              |
|                              |used to mark properties that  |                              |
|                              |should force a view to refresh|                              |
+------------------------------+------------------------------+------------------------------+

** Further Reading
- [[https://www.youtube.com/watch?v=iH88uJcdzDM][SwiftUI Reactive Intro - Understanding State and Binding in SwiftUI in Xcode 11 (2019)]]
- [[https://medium.com/%E5%BD%BC%E5%BE%97%E6%BD%98%E7%9A%84-swift-ios-app-%E9%96%8B%E7%99%BC%E5%95%8F%E9%A1%8C%E8%A7%A3%E7%AD%94%E9%9B%86/%E7%94%A8%E7%8B%80%E6%85%8B%E8%A8%AD%E8%A8%88-swiftui-%E7%95%AB%E9%9D%A2-%E8%AA%8D%E8%AD%98-state-property-binding-27fea6885ead][用狀態設計 SwiftUI 畫面 — 認識 @State property，binding & Toggle]]
- [[https://www.youtube.com/watch?v=stSB04C4iS4][SwiftUI Tutorial: What's the difference between @State, @ObjectBinding, and @EnvironmentObject?]]

#+LATEX: \newpage

* UserDefaults
:PROPERTIES:
:CUSTOM_ID: UserDefaults
:END:
** 幾種可以在 iOS app 永久儲存資料的方式:
- Filesystem: FileManager
- SQL database: CoreData(自學)
- Cloud: ClodKit, Firebase(下學期進度)
- UserDefualts

** UserDefautls
我們可以將UserDefaults視為 persistent dictionary。UserDefaults 可以儲存 Property List 類型的資料。Property List is not a protocol or a struct or anything tangible or Swift-like. It is any combination of String, Int, Bool, Floating point, Date, Array or Dictionary.

A powerful way to do this is using the *Codable* protocol inf Swift. Codable converts structs into Data objects.

** Using userDefaults
#+begin_src swift -r -n :eval no
let defaults = UserDefaults.standard
#+end_src

*** Storing Data
#+begin_src swift -r -n :eval no
defaults.set(object, forKey: "SomeKey")
defautls.setDouble(37.5, forKey: "MyDouble")
#+end_src

*** Retrieving Data
#+begin_src swift -r -n :eval no
let i: Int = defaults.integer(forKey: "MyInt")
let u: URL? = defaults.url(forKey: "MyURL")
let strings: [String]? = defaults.stringArray(forKey: "MyString")
#+end_src

** Demo
*** Create UserDefault.swift
#+begin_src swift -r -n :results output :exports nil
import Foundation
import Combine

class UserSettings: ObservableObject {
    @Published var username: String {
        didSet {
            UserDefaults.standard.set(username, forKey: "username")
        }
    }
    @Published var isVIP: Bool {
        didSet {
            UserDefaults.standard.set(isVIP, forKey: "isAccountVIP")
        }
    }
    init() {
        self.username = UserDefaults.standard.object(forKey: "username") as? String ?? ""
        self.isVIP = UserDefaults.standard.object(forKey: "isAccountVIP") as? Bool ?? true
    }
}
#+end_src
*** use userSetting in ContentView.swift
#+begin_src swift -r -n :results output :exports nil
import SwiftUI

struct settingsView: View {
    @ObservedObject var userSettings = UserSettings()
    var body: some View {
        List {
            HStack {
                Text("Username")
                TextField("Username", text:$userSettings.username)
                    .textFieldStyle(RoundedBorderTextFieldStyle())
            }
            Toggle(isOn: $userSettings.isVIP) {
                Text("VIP Account")
            }.padding()
        }
    }
}

struct ContentView: View {
    var body: some View {
        NavigationView {
            VStack {
                Text("BALABALA")
                NavigationLink("Settings", destination: settingsView())
                Spacer()
            }.navigationTitle("主畫面")
            .padding()
        }
    }
}
#+end_src
#+CAPTION: UserDefault for Settings
#+LABEL:fig:UserDefaults
#+name: fig:UserDefaults
#+ATTR_LATEX: :width 500
#+ATTR_ORG: :width 500
#+ATTR_HTML: :width 500
[[file:images/UserDefaults.jpg]]

** Reading Resources
- [[https://www.simpleswiftguide.com/how-to-use-userdefaults-in-swiftui/][How to use UserDefaults in SwiftUI]]

#+latex:\newpage

* Passing data between Views #3: Property Wrappers
:PROPERTIES:
:CUSTOM_ID: Wrappers
:END:
All of these @Something statements are property wrappers. A property wrapper is actually a struct. These structs encapsulate some "template" behavior applied to the vars they wrap.

The property wrapper feature adds *"syntactic sugar"* to make these structs easy to create/use." [fn:15]

** Property wrapper syntactic Sugar
#+begin_src swift -r -n :eval no
@Published var dice: Dice = Dice()
#+end_src
上述宣告實際同以下 struct
#+begin_src swift -r -n :eval no
struct Published {
    var wrappedValue: Dice
    var projectedValue: Publisher<Dice, Never>
}
#+end_src
接下來 Swift 產生以下變數
#+begin_src swift -r -n :eval no
var _dice: Published = Published(wrappedValue: Dice())
var dice: Dice {
    get { _dice.wrappedValue  }
    set { _dice.wrappedValue = newValue }
}
#+end_src

#+latex:\newpage

* TODO MVVM
:PROPERTIES:
:CUSTOM_ID: SW-MVVM
:END:
以"推薦書單"的 APP 為例:
- Model: 包含書名、作者、出版社....，而實際的資料來源可能是雲端資料庫(Firebase)、Web API、本機資料庫(Core data)。
    #+begin_src swift -r -n :eval no
struct Book {
    let title: String
    let author: String
    let dateReleased: String
    let publisher: String
    let isFavorite: Bool
}
  #+end_src
- View: 在 APP 畫面上呈現 Model 中資料的元件，如 Text, Image, Button, List.....
- ViewModel: 將 Model 中的資料取出，供 View 呈現，或是接受 View 輸入的資料，存回 Model。以"推薦書單 APP"為例，其 ViewModel 可能包含如下 struct:
  #+begin_src swift -r -n :eval no
struct BookDetailViewModel {
    var book: Book

    var isFavorite: Bool

    init(book: Book) {
        self.book = book
        self.isFavorite = false
    }

    var title: String {
        return self.book.title
    }

    var author: String {
        return self.book.author
    }

    var dateReleased: String {
        return self.book.dateReleased
    }

    var publisher: String {
        return self.book.publisher
    }
}
  #+end_src
  如果在 View 上有一個 Favorite Button，則當 user 點了 Favorite 後，ViewModel 應負責將 struct 中的 isFavorite 改存 True，並回存至 Model 中。Model 的資料只能透過 ViewModel 來新增刪除，View 無法直接染指。
  Model 與 UI 完全無關，單純用來儲存資料，ViewModel 為 Model 與 View 溝通的橋樑。

** View+ViewModel
- [[https://www.youtube.com/watch?v=gkAV4D1nopA][SwiftUI Tip Calculator Using MVVM Design Pattern]]
- [[https://www.youtube.com/watch?v=cbqMkIG6Qeg][Understanding MVVM Design Pattern]]: 講的超清楚

** DEMO
- Video:  [[https://www.youtube.com/watch?v=EhtK_H9LsYQ][MVVM SwiftUI - Model View ViewModel Pattern - Getting Started]]
- GitHub: https://github.com/rebeloper/SwiftUIMVVM.git

** DICE DEMO

** Reading Resources
- [[https://www.youtube.com/watch?v=1IlUBHvgY8Q&t=29s][SwiftUI MVVM Programming with ObservableObject @Published @ObservedObject]]

#+latex:\newpage

* TODO Web API: URLSession v.s. JSONDecoder
** Demo 1
*** ContentView.swift
#+begin_src swift -r -n :results output :exports nil
import SwiftUI

struct Todo: Codable, Identifiable {
    public var id: Int
    public var title: String
    public var completed: Bool
}

class FetchToDo: ObservableObject {
  // 1.
  @Published var todos = [Todo]()

    init() {
        let url = URL(string: "https://jsonplaceholder.typicode.com/todos")!
        // 2.
        URLSession.shared.dataTask(with: url) {(data, response, error) in
            do {
                if let todoData = data {
                    // 3.
                    let decodedData = try JSONDecoder().decode([Todo].self, from: todoData)
                    DispatchQueue.main.async {
                        self.todos = decodedData
                    }
                } else {
                    print("No data")
                }
            } catch {
                print("Error")
            }
        }.resume()
    }
}

struct ContentView: View {
    // 1.
    @ObservedObject var fetch = FetchToDo()
    var body: some View {
        VStack {
            // 2.
            List(fetch.todos) { todo in
                VStack(alignment: .leading) {
                    // 3.
                    Text(todo.title)
                    Text("\(todo.completed.description)") // print boolean
                        .font(.system(size: 11))
                        .foregroundColor(Color.gray)
                }
            }
        }
    }
}
#+end_src
#+LABEL:fig:JSON-1
#+name: fig:JSON-1
#+ATTR_LATEX: :width 300
#+ATTR_ORG: :width 300
#+ATTR_HTML: :width 600
[[file:images/json-1.jpg]]

** Demo 2
*** Flow.swift
#+begin_src swift -r -n :results output :exports nil
//
//  Flow.swift
//  json
//
//  Created by yen yung chin on 2020/11/21.
//

import Foundation

struct Flow: Decodable, Hashable {
    var 年: Int? = nil
    var 月: Int? = nil
    var 總運量: Int? = nil
    var 日均運量: Int? = nil
    var 假日均運量: Int? = nil
    var 月台上刷卡日均筆數: Double? = nil
    var 車上刷卡日均筆數: Double? = nil
    var 售票機日均筆數: Double? = nil
    var 補票日均筆數: Double? = nil
    var 團體票日均筆數: Double? = nil
}

class FetchFlow: ObservableObject {
    @Published var flows = [Flow]()
    init() {
        guard let url = URL(string: "https://data.kcg.gov.tw/dataset/6f29f6f4-2549-4473-aa90-bf60d10895dc/resource/30dfc2cf-17b5-4a40-8bb7-c511ea166bd3/download/lightrailtraffic.json") else {
            print("高雄輕軌統計")
            return
        }
        URLSession.shared.dataTask(with: url) {(data, response, error) in
            do {
                if let flowData = data {
                    let decodeData = try JSONDecoder().decode([Flow].self, from: flowData)

                    DispatchQueue.main.async {
                        self.flows = decodeData
                    }
                } else {
                    print("No data")
                }
            } catch {
                print("\(error)")
            }
        }.resume()
    }
}

#+end_src

#+RESULTS:

*** ContentView.swift
#+begin_src swift -r -n :results output :exports nil
import SwiftUI

struct ContentView: View {
    @ObservedObject var flow = FetchFlow()

    var body: some View {
        NavigationView {
            List() {
                ForEach(flow.flows, id: \.self) {(item) in
                    NavigationLink(destination: Text("總運量: \(item.總運量!)")) {
                        HStack {
                            Text("\(item.年!)年\(item.月!)月")
                            Text("\(item.日均運量!)")
                        }
                    }
                }
            }.navigationTitle("")
        }
    }
}
struct ContentView_Previews: PreviewProvider {
    static var previews: some View {
        ContentView()
    }
}

#+end_src
#+LABEL:fig:JSON-2
#+name: fig:JSON-2
#+ATTR_LATEX: :width 500
#+ATTR_ORG: :width 500
#+ATTR_HTML: :width 600
[[file:images/json-2.jpg]]

** 公開資料平台
- [[https://data.gov.tw/][政府資料開放平台]]
- [[https://data.kcg.gov.tw/dataset][高雄市政府開放資料集]]
- [[https://data.tainan.gov.tw/dataset][台南市政府開放資料集]]
- [[https://ptx.transportdata.tw/PTX/Service][公共運輸整合資訊]]
- [[https://kaleidosblog.s3-eu-west-1.amazonaws.com/json/tutorial.json][country/code JSON sample]]

** Further Reading
- [[https://www.youtube.com/watch?v=tdxKIPpPDAI][iOS Swift Tutorial: Use Web APIs and JSON Data with Swift 5]]- [[https://www.ioscreator.com/tutorials/swiftui-json-list-tutorial][SwiftUI Fetch JSON Data into List]]
- [[https://programmingwithswift.com/parse-json-from-file-and-url-with-swift/][Parse JSON from file and URL with Swift]]
- [[https://www.youtube.com/watch?v=1en4JyW3XSI][Making an API call and fetch JSON data in SwiftUI]]
- [[https://benoitpasquier.com/encoding-decoding-json-swift4/][The best way to encode and decode JSON in Swift4 ]]
- [[https://www.reddit.com/r/swift/comments/emw0i3/jsondecoder_fails_if_i_dont_have_an_id_for_each/][JSONDecoder fails if I don't have an "id" for each item... why doesn't UUID work?]]
- [[https://medium.com/%E5%BD%BC%E5%BE%97%E6%BD%98%E7%9A%84-swift-ios-app-%E9%96%8B%E7%99%BC%E6%95%99%E5%AE%A4/%E8%A7%A3%E6%B1%BAjson-key%E4%B8%8D%E5%9B%BA%E5%AE%9A%E6%99%82%E5%87%BA%E7%8F%BE-no-value-associated-with-key-codingkeys-%E7%8B%80%E6%B3%81-720d7d09486a][解決Json Key不固定時出現“No value associated with key CodingKeys” 狀況]]

#+latex: \newpage

* TODO Protocols
:PROPERTIES:
:CUSTOM_ID: SW-Protocols
:END:
- Protocols are a fundamental feature of Swift. They play a leading role in the structure of the Swift standard library and are a common method of abstraction. They provide a similar experience to interfaces that some other languages have. An advantage of protocols in Swift is that objects can conform to multiple protocols.[fn:16]
- Protocol是一個只宣告不定義的型別，然而這個特性可以讓我們的程式更有彈性，像在IOS SDK裡面，耳熟能詳的Delegate，就大量的運用Potocol，方便我們客製化事件發生時要處理的事情。[fn:17]

- 對任何程式開發來說，減少重覆的 code，把權責明確分開，讓 code 維護性變好，是非常重要的課題。而在現今的軟體開發模式中，有許多方法可以做到這點，最為人所知的一個模式，就是利用繼承 (Inheritance)，把會重覆利用的部份放在母類別，讓其它子類別去繼承。另外一種做法，則是利用 Composition Pattern，將功能做成組件分出來，讓需要的模組去組合取用。[fn:18]
#+begin_verse
A protocol defines a blueprint of methods, properties, and other requirements that suit a particular task or piece of functionality. The protocol can then be adopted by a class, structure, or enumeration to provide an actual implementation of those requirements. Any type that satisfies the requirements of a protocol is said to conform to that protocol. [fn:19]
#+end_verse

- 協定提供類型可以做的資訊，Classes 和 structs 則提供物件的資訊，協定則提供物件將會執行的動作。[fn:20]
#+begin_verse
協定是 Swift 一個重要的特性，它會定義出為了完成某項任務或功能所需的方法、屬性，但是本身不會實作這些任務跟功能，而僅僅只是表達出該任務或功能的名稱。協定為方法、屬性、以及其他特定的任務需求或功能定義藍圖。協定可被 class、struct、或 enum 類型採納以提供所需功能的具體實現。滿足了協定中需求的任意類型都叫做遵循了該協定。
#+end_verse

除了指定遵循類型必須實現的要求外，你可以擴展一個協定以實現其中的一些需求或實現一個符合類型的可以利用的附加功能。[fn:21]
- 例如，你可能有一個名為str的變量，其類型為String。身為一個開發人員，你應該知道str代表String，如果我們定義了一個名為StringProtocol的協定，它具有所有的String的API，我們可以擴展任何類型去遵循StringProtocol（意思是滿足其所有要求），如此一來，即可以使用該對象，讓它就像是一個String，儘管我們不知道它是什麼！如果看起來像一隻鴨子，游泳像一隻鴨子，叫聲像一隻鴨子，那就是一隻鴨子。我們新的StringProtocol可以告訴那些遵守它協定的類型能夠做什麼，且不需要知道這些類型的資訊。[fn:20]

** Protocol Syntax
*** Syntax
#+begin_src swift -r -n :results output :exports nil
protocol SomeProtocol {
    // protocol definition goes here
}
#+end_src
Classes , structs, enums can adopt these protocol by placing protocol’s name after the type’s name, separated by a colon, as part of their definition. Multiple protocols can be listed, and are separated by commas:[fn:22]
#+begin_src swift -r -n :results output :exports nil
struct SomeStructure: FirstProtocol, AnotherProtocol {
    //structure definition goes here
}
#+end_src
*** Adding property requirements
source: [[https://abhimuralidharan.medium.com/all-about-protocols-in-swift-11a72d6ea354][All about protocols in swift]]
- A protocol can have properties as well as methods that a class, enum or struct conforming to this protocol can implement.
- A protocol declaration only specifies the required property name and type. It doesn’t say anything about whether the property should be a stored one or a computed one.
- A protocol also specifies whether each property must be gettable or gettable and settable.
- Property requirements are always declared as variable properties, prefixed with the var keyword.
- Gettable and settable properties are indicated by writing { get set } after their type declaration, and gettable properties are indicated by writing { get }.
#+begin_src swift -r -n :results output :exports nil
protocol SomeProtocol {
    var mustBeSettable: Int { get set }
    var doesNotNeedToBeSettable: Int { get }
}
#+end_src
*** Protocols with mutating methods
Mutating methods are methods that we use on value types like structs and enums. These methods are allowed to modify the instance it belongs to and any properties of that instance. A small example:

Consider a simple struct Rectangle:
#+begin_src swift -r -n :results output :exports nil
struct Rectangle {
    var width = 1
    var height = 1

    func area() -> Int {
        return width * height
    }

    mutating func scaleBy(value: Int) {
        width *= value
        height *= value
    }
}
#+end_src
The scaleBy(value:) method modifies the value of width and height. So it should be marked as mutating. Otherwise the compiler will throw error at you.

#+begin_verse
If you mark a protocol instance method requirement as mutating, you do not need to write the mutatingkeyword when writing an implementation of that method for a class. The mutating keyword is only used by structures and enumerations.
#+end_verse
Consider an enum and class implementing a protocol with mutating function:
#+begin_src swift -r -n :results output :exports nil
protocol Togglable {
    mutating func toggle()
}

enum OnOffSwitch: Toggglable {
    case off, on
    mutating func toggle() {
        switch self {
        case .off:
            self = .on
        case .on:
            self = .off
        }
    }
}

var lightSwitch = OnOffSwitch.off
lightSwitch.toggle()

class ToggleClass: Togglable {
    var someBool = false
    func toggle() {
        someBool = true
    }
}

let toggleClassObj = ToggleClass()
toggleClassObj.toggle()
#+end_src
*** Initializer Requirements
Protocols can have specific initializers like normal methods which the conforming types can implement.
#+begin_src swift -r -n :results output :exports nil
protocol SomeProtocol {
    init(someParameter: Int)
}
#+end_src

** DEMO
#+begin_src swift -r -n :results output :exports nil
protocol Sound {
    func makeSound()
}

struct Dog: Sound {
    func makeSound() {
        print("Woof")
    }
}

struct Tree: Sound {
    func makeSound() {
        print("Susrrate")
    }
}

struct iPhone: Sound {
    func makeSound() {
        print("Ring")
    }
}
#+end_src

** 範例
*** 版本 1
本例中有兩個 struct: Song, Album 以及一個 class 用來播放 Song 或 Album，原本的 Player 要為不同的 struct 寫不同的 func，而且程式碼大多重複。
#+begin_src swift -r -n :eval no
import Cocoa
import AVKit

struct Song {
    var name: String
    var album: Album
    var audioURL: URL
    var isLiked: Bool
}

struct Album {
    var name: String
    var imageURL: URL
    var audioURL: URL
    var isLiked: Bool
}

class Player {
    private let avPlayer = AVPlayer()

    func play(_ song: Song) {
        let item = AVPlayerItem(url: song.audioURL)
        avPlayer.replaceCurrentItem(with: item)
        avPlayer.play()
    }

    func play(_ album: Album) {
        let item = AVPlayerItem(url: album.audioURL)
        avPlayer.replaceCurrentItem(with: item)
        avPlayer.play()
    }
}
#+end_src
*** 版本 2
宣告一個 protocol，定義 audioURL 變數(read only)，然後令兩個 struct 皆遵循該 protocol(方式有二)，如此，原本的 Player class 中的 play func 就能只寫一次。
#+begin_src swift -r -n :eval no
import Cocoa
import AVKit

protocol Playable {
    var audioURL: URL { get }
}

struct Song: Playable {
    var name: String
    var album: Album
    var audioURL: URL
    var isLiked: Bool
}

struct Album {
    var name: String
    var imageURL: URL
    var audioURL: URL
    var isLiked: Bool
}

extension Album: Playable {}
class Player {
    private let avPlayer = AVPlayer()

    func play(_ resource: Playable) {
        let item = AVPlayerItem(url: resource.audioURL)
        avPlayer.replaceCurrentItem(with: item)
        avPlayer.play()
    }
}
#+end_src
*** 版本 3
原本 protocol 的真正意思其實只是在確定 audioURL 是否能正確轉換成 Audio，所以其實將 protocol name 由 Playable 改為 AudioURLConvertable 會更貼近事實。
#+begin_src swift -r -n :eval no
import Cocoa
import AVKit

protocol AudioURLConvertable {
    var audioURL: URL { get }
}

struct Song: AudioURLConvertable {
    var name: String
    var album: Album
    var audioURL: URL
    var isLiked: Bool
}

struct Album: AudioURLConvertable {
    var name: String
    var imageURL: URL
    var audioURL: URL
    var isLiked: Bool
}

class Player {
    private let avPlayer = AVPlayer()

    func play(_ resource: AudioURLConvertable) {
        let item = AVPlayerItem(url: resource.audioURL)
        avPlayer.replaceCurrentItem(with: item)
        avPlayer.play()
    }
}

#+end_src

** mutating
protocol 除了可以提供傳回值型態的彈性，也可以用來變更 class/struct 中的屬性。如：
#+begin_src swift -r -n :eval no
import Cocoa
import AVKit

protocol Likeable {
    mutating func markAsLiked()
}

struct Song {
    var name: String
    var album: Album
    var audioURL: URL
    var isLiked: Bool
}

struct Album {
    var name: String
    var imageURL: URL
    var audioURL: URL
    var isLiked: Bool
}

extension Song: Likeable {
    mutating func markAsLiked() {
        isLiked = true
    }
}
#+end_src
可以在不改變原 struct Album 的情況下，藉由 extension 來擴充 Song，使其遵循 Likeable protocol，提供變供屬性 isLiked 的值，*這在擴充 API 功能時特別有用*。

** 擴充 protocol
除了擴充現有 struct，protocol 也可以用來擴充 protocol，如：
#+begin_src swift -r -n :eval no
import Cocoa
import AVKit

protocol Likeable {
    var isLiked: Bool {get set}
}

extension Likeable {
    mutating func markAsLiked() {
        isLiked = true
    }
}

struct Song {
    var name: String
    var album: Album
    var audioURL: URL
    var isLiked: Bool
}

struct Album {
    var name: String
    var imageURL: URL
    var audioURL: URL
    var isLiked: Bool
}

extension Song: Likeable {}
extension Album: Likeable {}
#+end_src

** Further Reading
- [[https://docs.swift.org/swift-book/LanguageGuide/Protocols.html][Protocol]]
- [[https://appcoda.com.tw/swift-protocol/][Swift開發指南：Protocols與Protocol Extensions的使用心法]]
- [[https://abhimuralidharan.medium.com/all-about-protocols-in-swift-11a72d6ea354][All about protocols in SWIFT]]
- [[https://blog.csdn.net/XunCiy/article/details/107367571][Swift5 14.Protocols]]

#+latex:\newpage

* TODO some
:PROPERTIES:
:CUSTOM_ID: some
:END:
#+begin_verse
Adding the keyword some in front of a return type indicates that the return type is opaque. [fn:23]
#+end_verse
** Generics
*** 問題
Generics 允許開發者在不同類型中複用你的程式碼，用來解決下列問題：
#+begin_src swift -r -n :eval no
func swapInts(_ a: inout Int, _ b: inout Int) {
    let temporaryB = b
    b = a
    a = temporaryB
}

var num1 = 10
var num2 = 20

swapInts(&num1, &num2)
print(num1)   // 20
print(num2)   // 10
#+end_src
但若想交換字串，則要寫成
#+begin_src swift -r -n :eval no
func swapStrings(_ a: inout String, _ b: inout String) {
    let temporaryB = b
    b = a
    a = temporaryB
}
#+end_src
可以發現除了參數之外，重複的 code 實在太多
*** 解決方案
將固定型態的參數轉為 Generic type
#+begin_src swift -r -n :eval no
import Cocoa

func swapTwoValues<T>(_ a: inout T, _ b: inout T) {
    let temporaryA = a
    a = b
    b = temporaryA
}


var num1 = 10
var num2 = 20

swapTwoValues(&num1, &num2)
print(num1)   // 20
print(num2)   // 10
#+end_src
另一個例子為 Stack 的實作：
原本只能儲存 Int 的 Stack 如下，若要儲存字串則要再另行定義。
#+begin_src swift -r -n :eval no
struct IntStack {
    var items = [Int]()
    mutating func push(_ item: Int) {
        items.append(item)
    }
    mutating func pop() -> Int {
        return items.removeLast()
    }
}
#+end_src
改為 Generic type 後可動態變更為整數 stack 或字串 stack，如：
#+begin_src swift -r -n :eval no
struct Stack<Element> {
    var items = [Element]()
    mutating func push(_ item: Element) {
        items.append(item)
    }
    mutating func pop() -> Element {
        return items.removeLast()
    }
}

var stackOfStrings = Stack<String>()
stackOfStrings.push("uno")
stackOfStrings.push("dos")
stackOfStrings.push("tres")
stackOfStrings.push("cuatro")
// the stack now contains 4 strings

#+end_src
** opaque
帶有不透明（opaque）返回類型的函數或方法，將會隱藏其返回值的類型[fn:24]
#+latex:\newpage

* TODO 進階主題
:PROPERTIES:
:CUSTOM_ID: advanced
:END:
- [[https://developer.apple.com/design/human-interface-guidelines/][Human Interface Guidelines]]: Apple 的人機設計界面指南
- [[https://developer.apple.com/documentation][Apple Developer Documentation]]: Apple 開發者文件
- [[https://www.appcoda.com.tw/protocol-extension/][利用 Protocol Extension 減少重覆的 Code　大大增強 Code 的維護性]]
- [[https://appcoda.com.tw/mastering-swift/][精通Swift：列舉、閉包、泛型、Protocols和高階函數]]
#+latex:\newpage

* Footnotes

[fn:1] [[https://medium.com/@mikru168/swiftui-%E6%B7%BA%E7%8E%A9-swiftui-%E7%94%A8%E5%85%B6%E5%BB%BA%E6%A7%8B%E4%B8%80%E7%B0%A1%E5%96%AE%E7%9A%84-app-2f2477bd49d7][簡介 SwiftUI & 用其建構一簡單的 APP ]]

[fn:2] [[https://medium.com/@SteelKiwiDev/swiftui-vs-uikit-benefits-and-drawbacks-6a540cced684][SwiftUI vs UIKit: Benefits and Drawbacks]]

[fn:3] [[https://www.appcoda.com.tw/swiftui-introduction/][SwiftUI 初體驗： 建構一個簡單 App　讓你了解 SwiftUI 有多強大！]]

[fn:4] [[https://stackoverflow.com/questions/56514998/find-all-available-images-for-imagesystemname-in-swiftui][Find all available images for Image(systemName:) in SwiftUI]]

[fn:5] [[https://medium.com/%E5%BD%BC%E5%BE%97%E6%BD%98%E7%9A%84-swift-ios-app-%E9%96%8B%E7%99%BC%E5%95%8F%E9%A1%8C%E8%A7%A3%E7%AD%94%E9%9B%86/%E7%94%A8%E7%8B%80%E6%85%8B%E8%A8%AD%E8%A8%88-swiftui-%E7%95%AB%E9%9D%A2-%E8%AA%8D%E8%AD%98-state-property-binding-27fea6885ead][用狀態設計 SwiftUI 畫面 — 認識 @State property，binding & Toggle]]

[fn:6] [[https://medium.com/%E5%BD%BC%E5%BE%97%E6%BD%98%E7%9A%84-swift-ios-app-%E9%96%8B%E7%99%BC%E5%95%8F%E9%A1%8C%E8%A7%A3%E7%AD%94%E9%9B%86/%E5%AE%A2%E8%A3%BD-ui-%E5%85%83%E4%BB%B6%E6%A8%A3%E5%BC%8F%E7%9A%84-swiftui-modifier-b31ff65c1f0d][客製 UI 元件樣式的 SwiftUI modifier]]

[fn:7] [[https://medium.com/%E5%BD%BC%E5%BE%97%E6%BD%98%E7%9A%84-swift-ios-app-%E9%96%8B%E7%99%BC%E5%95%8F%E9%A1%8C%E8%A7%A3%E7%AD%94%E9%9B%86/swiftui-%E8%A3%81%E5%88%87%E5%BD%A2%E7%8B%80%E7%9A%84-clipshape-mask-4fc49b34141][SwiftUI 裁切形狀的 clipShape & mask]]

[fn:8] [[https://www.appcoda.com.tw/swiftui-border/][SwiftUI 小技巧：利用 border 修飾符　輕鬆為按鈕或文本繪製邊框]]

[fn:9] [[https://www.hackingwithswift.com/quick-start/swiftui/how-to-create-a-list-of-dynamic-items][How to create a list of dynamic items]]

[fn:10] [[https://juejin.cn/post/6844903924084768776][[譯]理解 SwiftUI 裡的屬性裝飾器]]

[fn:11] [[https://www.hackingwithswift.com/quick-start/swiftui/what-is-the-binding-property-wrapper][What is the @Binding property wrapper?]]

[fn:12] [[https://medium.com/@nwyyy/swift%E7%AD%86%E8%A8%98-tab-bar-2ddba7d56587][iOS筆記：Tab Bar]]

[fn:13] [[https://www.appcoda.com/swiftui-tabview/][Introducing SwiftUI TabView and Working with Tab Bar Customization]]

[fn:14] [[https://www.youtube.com/watch?v=cc23YTGZVbQ][iOS 13 SwiftUI Tutorial: Interactively Transition and Share Data between Views with SwiftUI]]

[fn:15] [[https://www.youtube.com/watch?v=0i152oA3T3s][Lecture 9: Data Flow]]

[fn:16] [[https://www.raywenderlich.com/6742901-protocol-oriented-programming-tutorial-in-swift-5-1-getting-started][Protocol-Oriented Programming Tutorial in Swift 5.1: Getting Started]]

[fn:17] [[https://medium.com/%E5%BD%BC%E5%BE%97%E6%BD%98%E7%9A%84-swift-ios-app-%E9%96%8B%E7%99%BC%E6%95%99%E5%AE%A4/%E7%B0%A1%E6%98%93%E8%AA%AA%E6%98%8Eswift-4-protocol-919b7f9cbaee][『簡易說明Swift 4』Protocol]]

[fn:18] [[https://www.appcoda.com.tw/protocol-extension/][利用 Protocol Extension 減少重覆的 Code　大大增強 Code 的維護性]]

[fn:19] [[https://docs.swift.org/swift-book/LanguageGuide/Protocols.html][Protocols]]

[fn:20] [[https://www.appcoda.com.tw/swift-protocol/][Swift開發指南：Protocols與Protocol Extensions的使用心法]]

[fn:21] [[https://ithelp.ithome.com.tw/articles/10197366][Day-29 Swift 語法(25) - 協定 Protocol]]

[fn:22] [[https://abhimuralidharan.medium.com/all-about-protocols-in-swift-11a72d6ea354][All about protocols in swift]]

[fn:23] [[https://medium.com/@PhiJay/whats-this-some-in-swiftui-34e2c126d4c4][What’s this “some” in SwiftUI?]]

[fn:24] [[https://medium.com/jeremy-xue-s-blog/swift-%E7%A8%8B%E5%BC%8F%E8%AA%9E%E8%A8%80-opaque-types-600ad5758b91][Swift 程式語言 — Opaque Types]]

[fn:29] [[https://stackoverflow.com/questions/56437335/go-to-a-new-view-using-swiftui][Go to a new view using SwiftUI]]

[fn:28] [[https://www.appcoda.com.tw/swift-class/][Swift Class vs Struct：設計 Model 時，該用 Struct 還是 Class 呢？]]

[fn:27] [[https://appcoda.com.tw/mastering-swift/][精通Swift：列舉、閉包、泛型、Protocols和高階函數]]

[fn:26] [[https://ithelp.ithome.com.tw/articles/10220520][ Day 10: [Swift] 結構和類 (Struct and Class) ]]

[fn:25] [[https://levelup.gitconnected.com/demystifying-struct-class-and-enum-in-swift-5-43dde089e96a][Demystifying Struct, Class, and Enum in Swift 5]]
mu index --maildir="~/.gmail
